/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg3;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;

/**
 *
 * @author ASUS
 */
public class server extends javax.swing.JFrame {

    private ServerSocket serverSocket;
    private ArrayList<ClientHandler> clients = new ArrayList<>();
    private boolean quizStarted = false;
    private int currentQuestion = 0;

    /**
     * Creates new form server
     */
    public server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btntimipcuamay = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txthienthi = new javax.swing.JTextArea();
        btnbatdau = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtIp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtport = new javax.swing.JTextField();
        btnchayserver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btntimipcuamay.setText("Tìm IP của máy");
        btntimipcuamay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntimipcuamayActionPerformed(evt);
            }
        });

        txthienthi.setEditable(false);
        txthienthi.setColumns(20);
        txthienthi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txthienthi.setRows(5);
        jScrollPane1.setViewportView(txthienthi);

        btnbatdau.setText("Bắt Đầu");
        btnbatdau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbatdauActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("SERVER");

        txtIp.setEditable(false);

        jLabel2.setText("IP:");

        jLabel3.setText("Port:");

        txtport.setText("6789");

        btnchayserver.setText("Chạy Server");
        btnchayserver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnchayserverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtport))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtIp, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(btntimipcuamay))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(btnbatdau, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(btnchayserver))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jLabel1)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btntimipcuamay)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnchayserver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnbatdau)
                .addGap(91, 91, 91))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btntimipcuamayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntimipcuamayActionPerformed
        try{
            InetAddress addr = InetAddress.getLocalHost();
            byte[] ipAddr = addr.getAddress();
            String ipAddrStr = "";
            for(int j = 0; j < ipAddr.length; j++){
                if(j > 0 ){
                    ipAddrStr += ".";
                }
                ipAddrStr += ipAddr[j]&0xFF;
            }
            txtIp.setText(ipAddrStr);
        }catch(UnknownHostException e){
        }

    }//GEN-LAST:event_btntimipcuamayActionPerformed
    private class ClientHandler implements Runnable {

        private Socket clientSocket;
        private DataOutputStream outToClient;
        private BufferedReader inFromClient;

        public ClientHandler(Socket clientSocket) {
            this.clientSocket = clientSocket;

            try {
                outToClient = new DataOutputStream(clientSocket.getOutputStream());
                inFromClient = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void run() {
            try {
                String clientName = inFromClient.readLine();
                txthienthi.append("Client " + clientName + " đã tham gia.\n");

                while (true) {
                    String answer = inFromClient.readLine();

                    if (answer == null) {
                        break; // Đóng kết nối nếu client ngắt kết nối
                    }

                    xulyCauTraLoi(answer);

                    // Gửi câu hỏi tiếp theo nếu có
                    currentQuestion++;
                    if (currentQuestion < QuizServer.QUESTIONS.length) {
                        guiCauHoiVaCauTraLoi();
                    } else {
                        // Nếu hết câu hỏi, gửi kết quả cuối cùng và đóng kết nối
                        guiKetQuaCuoiCung();
                        break;
                    }
                }

                // Đóng kết nối khi client kết thúc trò chơi
                dongKetNoi();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void guiKetQuaCuoiCung() throws IOException {
            int soCauDung = currentQuestion;
            int soCauSai = QuizServer.QUESTIONS.length - soCauDung;
            //outToClient.writeBytes("Ban Da Tra Loi Dung " + soCauDung + " Cau, sai " + soCauSai + " Cau.\n");
             outToClient.writeBytes("Ket Thuc Tro Choi " );
        }

        // Phương thức mới để xử lý việc gửi câu hỏi và câu trả lời cho client
        public void guiCauHoiVaCauTraLoi() throws IOException {
            StringBuilder cauHoiVaCauTraLoi = new StringBuilder();
            for (int j = 0; j < QuizServer.QUESTIONS[currentQuestion].length - 1; j++) {
                cauHoiVaCauTraLoi.append(QuizServer.QUESTIONS[currentQuestion][j]).append(' ');
            }
            outToClient.writeBytes(cauHoiVaCauTraLoi.toString().trim() + '\n');
        }

        // Phương thức mới để xử lý việc xử lý câu trả lời từ client
        private void xulyCauTraLoi(String cauTraLoi) throws IOException {
            // Kiểm tra đáp án và gửi phản hồi cho client
            boolean laDung = cauTraLoi.equalsIgnoreCase(QuizServer.QUESTIONS[currentQuestion][5]);
            outToClient.writeBytes(laDung ? "Dung!\n" : "Sai!\n");
        }

        // Phương thức mới để xử lý việc đóng kết nối
        private void dongKetNoi() {
            try {
                clientSocket.close();
                clients.remove(this);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void sendQuestionAndAnswer() throws IOException {
            StringBuilder questionAndAnswers = new StringBuilder();
            for (int j = 0; j < QuizServer.QUESTIONS[currentQuestion].length - 1; j++) {
                questionAndAnswers.append(QuizServer.QUESTIONS[currentQuestion][j]).append(' ');
            }
            outToClient.writeBytes(questionAndAnswers.toString().trim() + '\n');
        }
    }
    private void btnbatdauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbatdauActionPerformed
        quizStarted = true;

        for (ClientHandler client : clients) {
            try {
                client.sendQuestionAndAnswer();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        btnbatdau.setEnabled(false);
    }//GEN-LAST:event_btnbatdauActionPerformed

    private void btnchayserverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnchayserverActionPerformed
        try {
            int port = Integer.parseInt(txtport.getText());
            serverSocket = new ServerSocket(port);
            txthienthi.append("Server đang chạy trên cổng " + port + "\n");

            new Thread(() -> {
                while (true) {
                    try {
                        Socket clientSocket = serverSocket.accept();
                        txthienthi.append("Client đã kết nối.\n");

                        ClientHandler clientHandler = new ClientHandler(clientSocket);
                        clients.add(clientHandler);

                        if (quizStarted) {
                            // Nếu đã bắt đầu, gửi câu hỏi và đáp án cho client mới kết nối
                            clientHandler.sendQuestionAndAnswer();
                        }

                        new Thread(clientHandler).start();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }).start();

            btnchayserver.setEnabled(false); // Không cho phép chạy server lại khi đã chạy
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnchayserverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnbatdau;
    private javax.swing.JButton btnchayserver;
    private javax.swing.JButton btntimipcuamay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtIp;
    private javax.swing.JTextArea txthienthi;
    private javax.swing.JTextField txtport;
    // End of variables declaration//GEN-END:variables
}
